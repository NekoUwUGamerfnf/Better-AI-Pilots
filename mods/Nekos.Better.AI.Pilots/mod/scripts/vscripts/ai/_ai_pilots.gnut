untyped

global const NPC_TITAN_PILOT_PROTOTYPE = 0
global function AiPilots_Init

global function CaptainThink


global function NpcPilotCallTitanThink
global function NpcPilotStopCallTitanThink
global function NpcPilotCallsInAndEmbarksTitan
global function NpcPilotRunsToAndEmbarksFallingTitan
global function NpcPilotCallsInTitan
global function NpcPilotEmbarksTitan
global function NpcPilotDisembarksTitan
global function NpcPilotBecomesTitan
global function NpcTitanBecomesPilot
global function TitanHasNpcPilot
global function NpcPilotGetPetTitan
global function NpcPilotSetPetTitan

global function NpcSetNextTitanRespawnAvailable
global function NpcResetNextTitanRespawnAvailable

global function AddCallback_OnNpcTitanBecomesPilot
global function AddCallback_OnNpcPilotBecomesTitan

global struct NPCPilotStruct
{
	bool isValid = false

	int team
	int spawnflags
	float accuracy
	float proficiency
	float health
	float physDamageScale
	string weapon
	string squadName

	asset modelAsset
	string title

	bool isInvulnerable
}

const NPC_NEXT_TITANTIME_RESET = -1
const NPC_NEXT_TITANTIME_MIN = 30
const NPC_NEXT_TITANTIME_MAX = 60
const NPC_NEXT_TITANTIME_INTERUPT = 15

function AiPilots_Init()
{
	RegisterSignal( "grenade_throw" )
	RegisterSignal( "NpcPilotBecomesTitan" )
	RegisterSignal( "NpcTitanBecomesPilot" )
	RegisterSignal( "StopCallTitanThink" )
	RegisterSignal( "NpcTitanRespawnAvailableUpdated" )
	AddSpawnCallback( "npc_pilot_elite", CaptainThink )
	AddDamageFinalCallback( "player", PilotTitanExecution )
	AddDamageFinalCallback( "npc_titan", PilotTitanExecution ) // titan execution :D
	AddDamageCallbackSourceID( eDamageSourceId.auto_titan_melee, ApplyNormalMeleeIdToNPCTitan )

	level.onNpcPilotBecomesTitanCallbacks	<- []
	level.onNpcTitanBecomesPilotCallbacks	<- []

}

function ScriptCallback_OnNpcPilotBecomesTitan( pilot, titan )
{
	local result = { pilot = pilot, titan = titan }
	Signal( pilot, "NpcPilotBecomesTitan", result )
	Signal( titan, "NpcPilotBecomesTitan", result )

	foreach ( callbackFunc in level.onNpcPilotBecomesTitanCallbacks )
	{
		callbackFunc( pilot, titan )
	}
}

function ScriptCallback_OnNpcTitanBecomesPilot( pilot, titan )
{
	local result = { pilot = pilot, titan = titan }
	Signal( pilot, "NpcTitanBecomesPilot", result )
	Signal( titan, "NpcTitanBecomesPilot", result )

	foreach ( callbackFunc in level.onNpcTitanBecomesPilotCallbacks )
	{
		callbackFunc( pilot, titan )
	}
}

function AddCallback_OnNpcPilotBecomesTitan( callbackFunc )
{
	Assert( "onNpcPilotBecomesTitanCallbacks" in level )
	AssertParameters( callbackFunc, 2, "pilotNPC, titanNPC" )

	level.onNpcPilotBecomesTitanCallbacks.append( callbackFunc )
}

function AddCallback_OnNpcTitanBecomesPilot( callbackFunc )
{
	Assert( "onNpcTitanBecomesPilotCallbacks" in level )
	AssertParameters( callbackFunc, 2, "pilotNPC, titanNPC" )

	level.onNpcTitanBecomesPilotCallbacks.append( callbackFunc )
}

function NpcSetNextTitanRespawnAvailable( npc, time )
{
	Assert( "nextTitanRespawnAvailable" in npc.s )
	npc.s.nextTitanRespawnAvailable = time
	npc.Signal( "NpcTitanRespawnAvailableUpdated" )
}

function NpcResetNextTitanRespawnAvailable( npc )
{
	Assert( "nextTitanRespawnAvailable" in npc.s )
	npc.s.nextTitanRespawnAvailable = NPC_NEXT_TITANTIME_RESET
	npc.Signal( "NpcTitanRespawnAvailableUpdated" )
}

function NpcPilotStopCallTitanThink( pilot )
{
	pilot.Signal( "StopCallTitanThink" )
}

/************************************************************************************************\

########  #### ##        #######  ########       ######## ##     ## #### ##    ## ##    ##
##     ##  ##  ##       ##     ##    ##             ##    ##     ##  ##  ###   ## ##   ##
##     ##  ##  ##       ##     ##    ##             ##    ##     ##  ##  ####  ## ##  ##
########   ##  ##       ##     ##    ##             ##    #########  ##  ## ## ## #####
##         ##  ##       ##     ##    ##             ##    ##     ##  ##  ##  #### ##  ##
##         ##  ##       ##     ##    ##             ##    ##     ##  ##  ##   ### ##   ##
##        #### ########  #######     ##             ##    ##     ## #### ##    ## ##    ##

\************************************************************************************************/
void function CaptainThink( entity npc )
{
	thread threadCaptainThink( npc )
}

void function threadCaptainThink( entity npc )
{
    if( GetMapName() == "mp_wargames" && (GetGameState() < eGameState.Playing))
	return
	npc.EndSignal( "OnDestroy" )
	npc.EndSignal( "OnDeath" )

	Assert( !( "nextTitanRespawnAvailable" in npc.s ) )
	Assert( !( "petTitan" in npc.s ) )

	npc.s.petTitan <- null
	npc.s.nextTitanRespawnAvailable <- null

	//wait for in combat...
	//WaitForNpcInCombat( npc )

	//... before we call in a titan
	if ( npc.s.nextTitanRespawnAvailable == null )
		npc.s.nextTitanRespawnAvailable = RandomFloatRange( NPC_NEXT_TITANTIME_MIN, NPC_NEXT_TITANTIME_MAX )

	WaitEndFrame() //wait a frame for things like petTitan and nextTitanRespawnAvailable to have a chance to be set from custom scripts
	if( npc.GetModelName() == $"models/humans/pilots/sp_medium_reaper_m.mdl" )
	thread RandomPilotWeapon( npc )
	if( npc.GetModelName() == $"models/humans/pilots/sp_medium_reaper_m.mdl" )
	thread RandomPilotName( npc )
	if( npc.GetModelName() == $"models/humans/pilots/sp_medium_reaper_m.mdl" )
	npc.kv.AccuracyMultiplier = 5.0
	if( npc.GetModelName() == $"models/humans/pilots/sp_medium_reaper_m.mdl" )
	npc.kv.WeaponProficiency = eWeaponProficiency.PERFECT
	if( npc.GetModelName() == $"models/humans/pilots/sp_medium_reaper_m.mdl" )
	thread RandomPilotModel( npc )
	entity pilotminimap = createpilotminimap( npc )
	thread pilotminimaponpilotdeath( npc, pilotminimap )
	thread NpcPilotCallTitanThink( npc )
}

entity function createpilotminimap( entity npc )
{
entity pilotminimap = CreateEntity( "npc_spectre" )
DispatchSpawn( pilotminimap )
TakeWeaponsForArray( pilotminimap, pilotminimap.GetMainWeapons() )
pilotminimap.kv.VisibilityFlags = ENTITY_VISIBLE_TO_NOBODY
pilotminimap.Hide()
HideName( pilotminimap )
pilotminimap.SetParent( npc, "HEADFOCUS" )
pilotminimap.NotSolid()
pilotminimap.kv.CollisionGroup = 0
pilotminimap.SetInvulnerable()
SetTeam( pilotminimap, npc.GetTeam() )
NPC_NoTarget( pilotminimap )
pilotminimap.EnableNPCFlag( NPC_IGNORE_ALL )
pilotminimap.StopPhysics()
return pilotminimap
}

void function pilotminimaponpilotdeath( entity npc, entity pilotminimap )
{
 while( true )
 {
if( IsValid( npc ) && IsValid( pilotminimap ) )
{
if( npc.GetTeam() != pilotminimap.GetTeam() )
SetTeam( pilotminimap, npc.GetTeam() )
}
if( IsValid( npc ) && !IsValid( pilotminimap ) )
{
pilotminimap = createpilotminimap( npc )
}
if( !IsValid( npc ) && IsValid( pilotminimap ) )
{
pilotminimap.Destroy()
return
}
WaitFrame()
 }
}

void function ApplyNormalMeleeIdToNPCTitan( entity victim, var damageInfo )
{
entity attacker = DamageInfo_GetAttacker( damageInfo )
int damageSourceID = DamageInfo_GetDamageSourceIdentifier( damageInfo )

if( !attacker.IsNPC() )
	return

if( !attacker.IsTitan() )
    return

if ( GetTitanCharacterName( attacker ) == "ronin" && attacker.GetTitanSoul().soul.seatedNpcPilot.isValid )
{
 if ( TitanCoreInUse( attacker ) )
 {
 DamageInfo_SetDamageSourceIdentifier( damageInfo, eDamageSourceId.mp_titancore_shift_core )
 return
 }
 if ( !TitanCoreInUse( attacker ) )
 {
 DamageInfo_SetDamageSourceIdentifier( damageInfo, eDamageSourceId.melee_titan_sword )
 return
 }
}

if( attacker.GetTitanSoul().soul.seatedNpcPilot.isValid )
{
DamageInfo_SetDamageSourceIdentifier( damageInfo, eDamageSourceId.melee_titan_punch )
return
}
}

void function PilotTitanExecution( entity ent, var damageInfo )
{
thread PilotTitanExecution_thread( ent, damageInfo )
}

void function PilotTitanExecution_thread( entity ent, var damageInfo )
{
    int damageType = DamageInfo_GetCustomDamageType( damageInfo )
	int damageSourceID = DamageInfo_GetDamageSourceIdentifier( damageInfo )
	entity attacker = DamageInfo_GetAttacker( damageInfo )

		if ( !IsAlive( ent ) || !attacker || ent.GetTeam() == attacker.GetTeam() || attacker == ent || !ent.IsTitan() || ent.IsInvulnerable() )
		return

	entity soul = ent.GetTitanSoul()
	if( attacker.IsNPC() && attacker.IsTitan() )
	{
		if( IsValid( soul ) && ( damageType & DF_MELEE || damageSourceID == eDamageSourceId.auto_titan_melee || damageSourceID == eDamageSourceId.melee_titan_punch || damageSourceID == eDamageSourceId.melee_titan_sword ) )
		{
		    entity titanSoul = attacker.GetTitanSoul()
			if( titanSoul.soul.seatedNpcPilot.isValid && CodeCallback_IsValidMeleeExecutionTarget( attacker, ent ) )
			{
				if( GetDoomedState( ent ) && !SoulHasPassive( soul, ePassives.PAS_AUTO_EJECT ) && !ent.IsPhaseShifted() && TitanCanSurviveDamage( ent, damageInfo ) )
				{
					ent.SetNoTarget( true )
					vector angles = attacker.GetAngles()
					angles.y = attacker.EyeAngles().y
					thread PilotTitanExecution_Wait( attacker, angles )
					waitthread PlayerTriesSyncedMelee( attacker, ent )
				}
			}
		}
	}
}

bool function TitanCanSurviveDamage( entity titan, var damageInfo )
{
    int damage = int( DamageInfo_GetDamage( damageInfo ) )
    int validHealth = GetTitanValidHealthFromDamageInfo( titan, damageInfo )
    //print( "titan( " + string( titan ) + " )'s valid health: " + string( validHealth ) )
    return damage < validHealth
}

int function GetTitanValidHealthFromDamageInfo( entity titan, var damageInfo )
{
    // force kill damage -- health is never valid
    if ( DamageInfo_GetForceKill( damageInfo ) )
        return 0

    const int INFINITE_HEALTH = 999999 // over max health limit, means titan won't die from damage

    entity soul = titan.GetTitanSoul()
    int healthShield = titan.GetHealth() 
    if ( IsValid( soul ) )
        healthShield += soul.GetShieldHealth()
    // undoomed titan
    if ( GetDoomedState( titan ) )
    {
        // in damage protection -- never die from current damage
        if ( IsValid( soul ) )
        {
            if ( Time() - soul.soul.doomedStartTime < TITAN_DOOMED_INVUL_TIME )
                return INFINITE_HEALTH
        }

        // normal doomed titan, valid health is current health + shield
        return healthShield
    }
    
    return 0 // titan in unknown state...
}

void function PilotTitanExecution_Wait( entity attacker, vector angles )
{
WaittillAnimDone( attacker )
if( IsValid( attacker ) )
{
int maxyaw = 360
if( Distance( angles, angles ) < maxyaw )
attacker.SetAngles( angles )
}
}

function NpcPilotCallTitanThink( entity pilot )
{
	Assert( pilot.IsNPC() )
	Assert( IsAlive( pilot ) )
	Assert ( !pilot.IsTitan() )

	pilot.EndSignal( "OnDestroy" )
	pilot.EndSignal( "OnDeath" )
	pilot.Signal( "StopCallTitanThink" )
	pilot.EndSignal( "StopCallTitanThink" )

	string title = pilot.GetTitle() + "'s Auto-Titan"
	local count = 1 //1 titan call in at a time

	while ( true ) //this loop usually only happens once, unless the titan called in is destroyed before the living pilot can get to it
	{
		entity titan = NpcPilotGetPetTitan( pilot )
		if ( !IsAlive( titan ) )
		{
			//wait for ready titan
			waitthread __WaitforTitanCallinReady( pilot )

			//ready to call in - look for a good spot
			SpawnPointFP spawnPoint
			while ( true )
			{
				wait ( RandomFloatRange( 1, 2 ) )

				//dont do stuff when animating on a parent
				if ( pilot.GetParent() )
					continue

			    //Don't deploy if too close to an enemy
				//if ( HasEnemyWithinDist( pilot, 300.0 ) )
					//continue

				// DO the opposite - only deploy if has an enemy within this distance
			//	if ( !HasEnemyWithinDist( pilot, 2000.0 ) )
			//		continue

				//don't do stuff if you dont have a spawnPoint
				spawnPoint = FindSpawnPointForNpcCallin( pilot, $"models/titans/medium/titan_medium_ajax.mdl", HOTDROP_TURBO_ANIM )
				if ( !spawnPoint.valid )
					continue

				break
			}

			//call in a titan, run to it, and embark
			//in SP by default, the friendlys do NOT do the beacon tell
			titan = NpcPilotCallsInAndEmbarksTitan( pilot, spawnPoint.origin, spawnPoint.angles )
			titan.SetTitle( title )
		}
		else
		{
			Assert( IsAlive( titan ) )

			if ( HasEnemyRodeo( titan ) )
			{
				while ( HasEnemyRodeo( titan ) )
				{
					WaitSignal( titan.GetTitanSoul(), "RodeoRiderChanged", "OnDestroy" )
				}

				wait 4 //don't pop back in immediately
			}

			if ( !IsAlive( titan ) )
				continue //the titan didn't make it, lets loop back up and try again

			if ( titan.GetTitanSoul().IsDoomed() )
			{
				titan.WaitSignal( "OnDestroy" )
				continue //the titan didn't make it, lets loop back up and try again
			}

			//start running to titan as it kneels
			NPCFollowsNPC( pilot, titan )
			thread __TitanKneelsForPilot( pilot, titan )
			wait 2.0 //wait for titan to be in position

			if ( !IsAlive( titan ) )
				continue //the titan didn't make it, lets loop back up and try again

			//run to the titan
			NPCFollowsNPC( pilot, titan )

			if ( !IsAlive( titan ) )
				continue //the titan didn't make it, lets loop back up and try again

			//embark titan
			thread NpcPilotEmbarksTitan( pilot, titan )
		}

		local result = WaitSignal( titan, "NpcPilotBecomesTitan", "OnDeath", "OnDestroy" )
		if ( result.signal != "NpcPilotBecomesTitan" )
			continue //the titan didn't make it, lets loop back up and try again
	}
}

/************************************************************************************************\

 ######     ###    ##       ##             #### ##    ##       ######## #### ########    ###    ##    ##
##    ##   ## ##   ##       ##              ##  ###   ##          ##     ##     ##      ## ##   ###   ##
##        ##   ##  ##       ##              ##  ####  ##          ##     ##     ##     ##   ##  ####  ##
##       ##     ## ##       ##              ##  ## ## ##          ##     ##     ##    ##     ## ## ## ##
##       ######### ##       ##              ##  ##  ####          ##     ##     ##    ######### ##  ####
##    ## ##     ## ##       ##              ##  ##   ###          ##     ##     ##    ##     ## ##   ###
 ######  ##     ## ######## ########       #### ##    ##          ##    ####    ##    ##     ## ##    ##

\************************************************************************************************/


entity function NpcPilotCallsInAndEmbarksTitan( entity pilot, vector origin, vector angles )
{
	entity titan = NpcPilotCallsInTitan( pilot, origin, angles )
	thread NpcPilotRunsToAndEmbarksFallingTitan( pilot, titan )

	return titan
}

function NpcPilotRunsToAndEmbarksFallingTitan( entity pilot, entity titan )
{
	titan.EndSignal( "OnDeath" )

	//wait for it to land
	waitthread WaitTillHotDropComplete( titan )
	//ShowName( titan )

	if ( !IsAlive( titan ) )
		return
	titan.EndSignal( "OnDeath" )

	//titan is alive on land so clean it up on thread end
	OnThreadEnd(
		function () : ( titan )
		{
			if ( !IsAlive( titan ) )
				return

			SetStanceStand( titan.GetTitanSoul() )

			//the pilot never made it to embark - lets stand our titan up so he can fight
			if ( !TitanHasNpcPilot( titan ) )
			{
				thread PlayAnimGravity( titan, "at_hotdrop_quickstand" )
				//HideName( titan )
			}
		}
	)

	//if the pilot has died, early out
	if ( !IsAlive( pilot ) )
		return

	pilot.EndSignal( "OnDeath" )

	//run to the titan
	NPCFollowsNPC( pilot, titan )

	//embark titan
	waitthread NpcPilotEmbarksTitan( pilot, titan )
}

entity function NpcPilotCallsInTitan( entity pilot, vector origin, vector angles )
{
	Assert( !pilot.IsTitan() )
	Assert( IsAlive( pilot ) )
	Assert( !NpcPilotGetPetTitan( pilot ) )

	//reset the next titan callin timer
	NpcResetNextTitanRespawnAvailable( pilot )

	//spawn a titan
	array<string> settingsArray = GetAllowedTitanAISettings()

	string titanSettings = settingsArray.getrandom()
	entity titan = CreateNPC( "npc_titan", pilot.GetTeam(), origin, angles )
	SetSpawnOption_AISettings( titan, titanSettings )
	DispatchSpawn( titan )
	thread PrimeTitan( titan )
	NpcPilotSetPetTitan( pilot, titan )

	//call it in
	thread NPCTitanHotdrops( titan, false )
	thread TitanStandAfterDropIn( titan, pilot )
    titan.SetOwner( pilot )
	NPCFollowsNPC( titan, pilot )
	PilotNotInTitanSet( titan )
	int randomtitancamo = RandomIntRange( 0, 160 ) // 159 is all camos
	titan.SetSkin( 2 ) // titan skin has skinIndex of 2
	titan.SetCamo( randomtitancamo ) // set camo to random
	thread AutoTitanLoadout( titan )
	//thread EjectWhenDoomed( titan )
	//thread __TitanKneelOrStandAfterDropin( titan, pilot )

	//get the titan ready to be embarked
	SetStanceKneel( titan.GetTitanSoul() )
	titan.SetTitle( pilot.GetTitle() + "'s Auto-Titan" )
	UpdateEnemyMemoryFromTeammates( titan )

	return titan
}

array<string> function RandomPilotName( pilot ) 
{
array<string> RandomPilotNames
RandomPilotNames.extend(
[
    "ShadowRider", "TitanVanguard", "StormBreaker", "IronFist", "NebulaKnight", "PhantomEcho", 
    "SteelFury", "NovaViper", "ThunderClash", "VortexAlpha", "IronSentinel", "GhostReaper", 
    "DeathPulse", "TechnoHunter", "SkyReaper", "ScorchedEarth", "BlazeStorm", "DarkRaven", 
    "FrostWarrior", "WarBringer", "SkyForge", "WolfStriker", "ArcKnight", "EclipseHunter", 
    "OmegaBlade", "ThunderStrike", "PhantomFury", "RedTalon", "NightRaider", "CycloneBlaze", 
    "VenomFang", "IronPhantom", "GhostStrike", "EmberStorm", "NovaGuardian", "TitanSlayer", 
    "RavenWarrior", "StormKnight", "DreadEcho", "DarkNova", "VoidStriker", "TitanHunter", 
    "PlasmaBeast", "ViperStorm", "StormPhoenix", "SpecterBlaze", "SteelViper", "HellRider", 
    "NovaRanger", "ShadowTitan", "RadiantFalcon", "CypherBlaze", "ThunderBolt", "IronViper", 
    "TechSaber", "PhantomViper", "TitanEcho", "FireWalker", "GlacierHunter", "NexusStriker", 
    "OmegaPhoenix", "HyperBolt", "MechaKnight", "DarkPhantom", "BlackIron", "NightFury", 
    "BlazeTitan", "DeathStalker", "CycloneFury", "PhantomRider", "ThunderRage", "ShadowAssault", 
    "IronWarden", "PlasmaVortex", "VengefulFury", "BlazingViper", "EchoWarrior", "SteelBreaker", 
    "NightReaper", "FrostStrike", "StormFury", "BlazeVanguard", "TitanRanger", "NovaRavager", 
    "WarBringerX", "ThunderGuardian", "PhantomCannon", "FrostWarriorX", "ShadowRavager", 
    "TalonReaper", "ViperStrike", "RedInferno", "IronScorcher", "StormViper", "TitanBlaze", 
    "EchoHunter", "PlasmaViperX", "SpecterWarrior", "GlacierStrike", "VortexReaper", "OmegaRider", 
    "DreadKnight", "PhantomNova", "CyberStorm", "ThunderWolf", "TitanPhoenix", "FrostVanguard", 
    "GhostWarden", "BlazeSentinel", "SpecterRanger", "PlasmaViperX", "InfernoTitan", "WarLord", 
    "EchoTitan", "IronSpecter", "NovaBlade", "CyberViper", "StormKnightX", "PhantomFalcon", 
    "TitanFury", "RogueStriker", "NightViper", "OmegaWarrior", "ThunderWarden", "PlasmaRanger", 
    "BlazeKnight", "EchoFury", "TitanHellstorm", "RedViper", "IronWarrior", "SteelWolf", 
    "ShadowKnight", "StormCannon", "NovaReaver", "CycloneTitan", "SpecterStriker", "PhantomVanguard", 
    "BlazeStrike", "TitanX", "FrostRider", "ShadowStorm", "OmegaKnight", "VortexTitan", 
    "TitanNight", "StormReaper", "InfernoBlaze", "PlasmaFury", "NovaTitan", "RogueTitan", 
    "StormFuryX", "IronBlaze", "PhantomFrost", "DarkViper", "TitanSpecter", "RogueViper", 
    "VortexBlaze", "TitanCannon", "OmegaViper", "FrostKnight", "NovaHunter", "TitanWarden", 
    "BlazeHunter", "RedVanguard", "OmegaBlaze", "PlasmaStorm", "StormRider", "NightReaver", 
    "TitanFrost", "CyberKnight", "BlazeViperX", "FrostViper", "SpecterTitan", "EchoKnight", 
    "IronPhantomX", "NightTitan", "StormPhantom", "TitanWraith", "NovaStorm", "TitanWarrior", 
    "RedStorm", "VortexKnight", "PhantomWarrior", "EchoViper", "ThunderTitan", "PlasmaTitan", 
    "TitanRage", "NovaKnight", "SpecterFury", "TitanSlayerX", "StormRanger", "BlazeAssault", 
    "EchoRider", "PlasmaWarrior", "TitanInferno", "RedRanger", "StormVanguard", "VortexWarrior", 
    "RogueFury", "TitanVanguardX", "OmegaTitan", "GhostTitan", "VortexBlazeX", "BlazeFury", 
    "PlasmaKnight", "SpecterWarden", "TitanWardenX", "PhantomStrike", "RogueKnight", "FrostStorm", 
    "TitanBlazeX", "ViperHunter", "EchoAssault", "TitanViperX", "RedKnight", "OmegaBlazeX", 
    "StormViperX", "PlasmaFrost", "TitanWraithX", "GhostReaver", "NightStorm", "FrostAssault", 
    "BlazeKnightX", "PhantomHunter", "TitanWardenFury", "VortexRider", "ThunderKnight", "PlasmaFuryX", 
    "SpecterFuryX", "NightKnight", "TitanFuryX", "OmegaStriker", "RedTitan", "VortexHunter", 
    "FrostStrikeX", "BlazeWarrior", "TitanReaver", "SpecterHunter", "OmegaWarriorX", "PlasmaVanguard", 
    "VortexRanger", "ShadowHunter", "TitanEchoX", "PlasmaRider", "StormFuryX", "BlazeVanguardX", 
    "IronHunter", "TitanSpecterX", "PhantomViperX", "NightRider", "ThunderBlaze", "BlazeFuryX", 
    "PlasmaReaver", "OmegaStrikerX", "TitanVanguardFury", "RedTitanX", "SpecterCannon", "EchoKnightX", 
    "OmegaHunter", "VortexVanguard", "TitanThunder", "BlazeStrikeX", "FrostHunter", "PlasmaKnightX", 
    "TitanViperVanguard", "GhostTitanX", "StormVanguardX", "PlasmaWarden", "TitanRider", "OmegaVortex", 
    "VortexTitanX", "PlasmaWardenX", "TitanHunterX", "TitanWraithVanguard", "OmegaPhantom", 
    "VortexWarden", "TitanGhostX", "FrostTitanX", "BlazeFuryVanguard", "SpecterTitanX", "RogueTitanX"
]
)
pilot.SetTitle( "[BOT]" + RandomPilotNames.getrandom() )
return RandomPilotNames
}

void function RandomPilotWeapon( entity pilot )
{
TakeWeaponsForArray( pilot, pilot.GetMainWeapons() )
int randompilotweapon = RandomIntRange( 0, 12 )
if ( randompilotweapon == 0 )
pilot.GiveWeapon( "mp_weapon_rspn101_og" )
if ( randompilotweapon == 1 )
pilot.GiveWeapon( "mp_weapon_r97" )
if ( randompilotweapon == 2 )
pilot.GiveWeapon( "mp_weapon_car" )
if ( randompilotweapon == 3 )
pilot.GiveWeapon( "mp_weapon_vinson" )
if ( randompilotweapon == 4 )
pilot.GiveWeapon( "mp_weapon_epg" )
if ( randompilotweapon == 5 )
pilot.GiveWeapon( "mp_weapon_smr" )
if ( randompilotweapon == 6 )
pilot.GiveWeapon( "mp_weapon_lmg" )
if ( randompilotweapon == 7 )
pilot.GiveWeapon( "mp_weapon_g2" )
if ( randompilotweapon == 8 )
pilot.GiveWeapon( "mp_weapon_rspn101" )
if ( randompilotweapon == 9 )
pilot.GiveWeapon( "mp_weapon_car" )
if ( randompilotweapon == 10 )
pilot.GiveWeapon( "mp_weapon_hemlok" )
if ( randompilotweapon == 11 )
pilot.GiveWeapon( "mp_weapon_lstar" )
}

void function RandomPilotModel( entity pilot )
{
int randompilotmodel = RandomIntRange( 0, 6 )
if ( randompilotmodel == 0 )
pilot.SetModel( $"models/humans/pilots/pilot_medium_geist_m.mdl" )
if ( randompilotmodel == 1 )
pilot.SetModel( $"models/humans/pilots/pilot_medium_geist_f.mdl" )
if ( randompilotmodel == 2 )
pilot.SetModel( $"models/humans/pilots/pilot_medium_stalker_m.mdl" )
if ( randompilotmodel == 3 )
pilot.SetModel( $"models/humans/pilots/pilot_medium_stalker_f.mdl" )
if ( randompilotmodel == 4 )
pilot.SetModel( $"models/humans/pilots/pilot_medium_reaper_m.mdl" )
if ( randompilotmodel == 5 )
pilot.SetModel( $"models/humans/pilots/pilot_medium_reaper_f.mdl" )
}

void function PrimeTitan( entity titan )
{
    if( IsValid( titan ) )
	{
	string attackerType = GetTitanCharacterName( titan )
	switch ( attackerType )
	    {
		case "ronin":
		                if ( RandomInt( 2 ) < 1 )
                        titan.SetModel( $"models/titans/light/titan_light_ronin_prime.mdl" )
                        break;
		case "scorch":
		                if ( RandomInt( 2 ) < 1 )
                        titan.SetModel( $"models/titans/heavy/titan_heavy_scorch_prime.mdl" )
                        break;
		case "legion":
		                if ( RandomInt( 2 ) < 1 )
                        titan.SetModel( $"models/titans/heavy/titan_heavy_legion_prime.mdl" )
			            break;
		case "ion":
		                if ( RandomInt( 2 ) < 1 )
                        titan.SetModel( $"models/titans/medium/titan_medium_ion_prime.mdl" )
                        break;
		case "tone":
		                if ( RandomInt( 2 ) < 1 )
                        titan.SetModel( $"models/titans/medium/titan_medium_tone_prime.mdl" )
                        break;
        case "northstar":
		                if ( RandomInt( 2 ) < 1 )
                        titan.SetModel( $"models/titans/light/titan_light_northstar_prime.mdl" )
			            break;
		}
	}
}

void function core( entity titan )
{
while( true )
   {
    titan.WaitSignal( "CoreBegin" )
    if( IsValid( titan ) )
    {
    ronincore( titan )
    }
   }
}

void function ronincore( entity titan )
{
    entity meleeWeapon = titan.GetMeleeWeapon()
	if( meleeWeapon.HasMod( "super_charged" ) )
    {
    titan.SetAISettings( "npc_titan_stryder_leadwall_shift_core" )
    titan.SetBehaviorSelector( "behavior_titan_melee_core" )
    titan.WaitSignal( "CoreEnd" )
	if( IsValid( titan ) )
    thread PilotInTitanSet( titan )
    }
}

void function MonitorMonarchShield( entity npc )
{
	entity soul = npc.GetTitanSoul()
	if ( !IsValid( soul ) )
		return

	if ( !soul.soul.seatedNpcPilot.isValid )
	    return
	
	soul.EndSignal( "OnDestroy" )
	soul.EndSignal( "OnDeath" )
	
	while( true )
	{
	WaitFrame()
		entity soul = npc.GetTitanSoul()
	    if ( !IsValid( soul ) )
		return

	    if ( !soul.soul.seatedNpcPilot.isValid )
	    return

		WaitTillTitanCoreCharge( npc )

		if( !IsValid( npc ) )
		return

	    if ( !IsValid( soul ) )
		return

	    if ( !soul.soul.seatedNpcPilot.isValid )
	    return

		if( soul.GetShieldHealth() > soul.GetShieldHealthMax() * 0.1 )
	    {
		thread MonitorMonarchShield( npc )
		return
		}
		
		if( npc.ContextAction_IsBusy() || npc.ContextAction_IsMeleeExecution() )
	    {
		thread MonitorMonarchShield( npc )
		return
		}

			SoulTitanCore_SetNextAvailableTime( soul, 0.0 )
			entity coreEffect = CreateCoreEffect( npc, $"P_titan_core_atlas_blast" )
			EmitSoundOnEntity( npc, "Titan_Monarch_Smart_Core_Activated_3P" )
			soul.SetShieldHealth( soul.GetShieldHealthMax() )
			entity shake = CreateShake( npc.GetOrigin(), 16.0, 5.0, 2.5, 1500.0 )
			shake.SetParent( npc, "CHESTFOCUS" )
			entity weapon = npc.GetOffhandWeapon( OFFHAND_EQUIPMENT )
			if( IsValid( weapon ) )
			{
			thread MonarchUpgrade( weapon )
			wait weapon.GetCoreDuration()
			}
			if( !IsValid( weapon ) )
			wait 2.5
			shake.Destroy()
			coreEffect.Destroy()
	}
}

void function WaitTillTitanCoreCharge( entity titan )
{
	entity soul = titan.GetTitanSoul()
	if ( !IsValid( soul ) )
		return

	soul.EndSignal( "OnDestroy" )

	// wait till titan core fully expire first
	while ( IsAlive( titan ) )
	{
		if ( !TitanCoreInUse( titan ) )
			break

		WaitFrame()
	}

	// wait till titan core charge
	while ( IsAlive( titan ) )
	{
		//print( "SoulTitanCore_GetNextAvailableTime( soul ): " + string( SoulTitanCore_GetNextAvailableTime( soul ) ) )
		if ( SoulTitanCore_GetNextAvailableTime( soul ) == 1.0 )
			break

		WaitFrame()
	}
}

void function MonarchUpgrades( entity titan )
{
entity soul = titan.GetTitanSoul()
if( !IsValid( soul ) )
return

if ( RandomInt( 100 ) < 50 )
GivePassive( soul, ePassives.PAS_VANGUARD_CORE1 )

if( !SoulHasPassive( soul, ePassives.PAS_VANGUARD_CORE1 ) )
GivePassive( soul, ePassives.PAS_VANGUARD_CORE2 )

GivePassive( soul, ePassives.PAS_VANGUARD_CORE6 )

if ( RandomInt( 100 ) < 33 )
GivePassive( soul, ePassives.PAS_VANGUARD_CORE7 )

if ( RandomInt( 100 ) < 33 && !SoulHasPassive( soul, ePassives.PAS_VANGUARD_CORE7 ) )
GivePassive( soul, ePassives.PAS_VANGUARD_CORE8 )

if( !SoulHasPassive( soul, ePassives.PAS_VANGUARD_CORE7 ) && !SoulHasPassive( soul, ePassives.PAS_VANGUARD_CORE8 ) )
GivePassive( soul, ePassives.PAS_VANGUARD_CORE9 )
}

void function MonarchUpgrade( entity weapon )
{
	entity owner = weapon.GetWeaponOwner()
	entity soul = owner.GetTitanSoul()
		int currentUpgradeCount = soul.GetTitanSoulNetInt( "upgradeCount" )
		if ( currentUpgradeCount == 0 )
		{
			if ( SoulHasPassive( soul, ePassives.PAS_VANGUARD_CORE1 ) )  // Arc Rounds
			{
				array<entity> weapons = GetPrimaryWeapons( owner )
				if ( weapons.len() > 0 )
				{
					entity primaryWeapon = weapons[0]
					if ( IsValid( primaryWeapon ) )
					{
						array<string> mods = primaryWeapon.GetMods()
						mods.append( "arc_rounds" )
						primaryWeapon.SetMods( mods )
						primaryWeapon.SetWeaponPrimaryClipCount( primaryWeapon.GetWeaponPrimaryClipCount() + 10 )
					}
				}
				if ( owner.IsPlayer() )
				{
					int conversationID = GetConversationIndex( "upgradeTo1" )
					Remote_CallFunction_Replay( owner, "ServerCallback_PlayTitanConversation", conversationID )
					Remote_CallFunction_NonReplay( owner, "ServerCallback_VanguardUpgradeMessage", 1 )
				}
			}
			else if ( SoulHasPassive( soul, ePassives.PAS_VANGUARD_CORE2 ) ) //Missile Racks
			{
				entity offhandWeapon = owner.GetOffhandWeapon( OFFHAND_RIGHT )
				if ( IsValid( offhandWeapon ) )
				{
					array<string> mods = offhandWeapon.GetMods()
					mods.append( "missile_racks" )
					offhandWeapon.SetMods( mods )
				}
				if ( owner.IsPlayer() )
				{
					int conversationID = GetConversationIndex( "upgradeTo1" )
					Remote_CallFunction_Replay( owner, "ServerCallback_PlayTitanConversation", conversationID )
					Remote_CallFunction_NonReplay( owner, "ServerCallback_VanguardUpgradeMessage", 2 )
				}
			}
			else if ( SoulHasPassive( soul, ePassives.PAS_VANGUARD_CORE3 ) ) //Energy Transfer
			{
				entity offhandWeapon = owner.GetOffhandWeapon( OFFHAND_LEFT )
				if ( IsValid( offhandWeapon ) )
				{
					array<string> mods = offhandWeapon.GetMods()
					mods.append( "energy_transfer" )
					offhandWeapon.SetMods( mods )
				}
				if ( owner.IsPlayer() )
				{
					int conversationID = GetConversationIndex( "upgradeTo1" )
					Remote_CallFunction_Replay( owner, "ServerCallback_PlayTitanConversation", conversationID )
					Remote_CallFunction_NonReplay( owner, "ServerCallback_VanguardUpgradeMessage", 3 )
				}
			}
		}
		else if ( currentUpgradeCount == 1 )
		{
			if ( SoulHasPassive( soul, ePassives.PAS_VANGUARD_CORE4 ) )  // Rapid Rearm
			{
				entity offhandWeapon = owner.GetOffhandWeapon( OFFHAND_ANTIRODEO )
				if ( IsValid( offhandWeapon ) )
				{
					array<string> mods = offhandWeapon.GetMods()
					mods.append( "rapid_rearm" )
					offhandWeapon.SetMods( mods )
				}
				array<entity> weapons = GetPrimaryWeapons( owner )
				if ( weapons.len() > 0 )
				{
					entity primaryWeapon = weapons[0]
					if ( IsValid( primaryWeapon ) )
					{
						array<string> mods = primaryWeapon.GetMods()
						mods.append( "rapid_reload" )
						primaryWeapon.SetMods( mods )
					}
				}
				if ( owner.IsPlayer() )
				{
					int conversationID = GetConversationIndex( "upgradeTo2" )
					Remote_CallFunction_Replay( owner, "ServerCallback_PlayTitanConversation", conversationID )
					Remote_CallFunction_NonReplay( owner, "ServerCallback_VanguardUpgradeMessage", 4 )
				}
			}
			else if ( SoulHasPassive( soul, ePassives.PAS_VANGUARD_CORE5 ) ) //Maelstrom
			{
				entity offhandWeapon = owner.GetOffhandWeapon( OFFHAND_INVENTORY )
				if ( IsValid( offhandWeapon ) )
				{
					array<string> mods = offhandWeapon.GetMods()
					mods.append( "maelstrom" )
					offhandWeapon.SetMods( mods )
				}
				if ( owner.IsPlayer() )
				{
					int conversationID = GetConversationIndex( "upgradeTo2" )
					Remote_CallFunction_Replay( owner, "ServerCallback_PlayTitanConversation", conversationID )
					Remote_CallFunction_NonReplay( owner, "ServerCallback_VanguardUpgradeMessage", 5 )
				}
			}
			else if ( SoulHasPassive( soul, ePassives.PAS_VANGUARD_CORE6 ) ) //Energy Field
			{
				entity offhandWeapon = owner.GetOffhandWeapon( OFFHAND_LEFT )
				if ( IsValid( offhandWeapon ) )
				{
					array<string> mods = offhandWeapon.GetMods()
					if ( mods.contains( "energy_transfer" ) )
					{
						array<string> mods = offhandWeapon.GetMods()
						mods.fastremovebyvalue( "energy_transfer" )
						mods.append( "energy_field_energy_transfer" )
						offhandWeapon.SetMods( mods )
					}
					else
					{
						array<string> mods = offhandWeapon.GetMods()
						mods.append( "energy_field" )
						offhandWeapon.SetMods( mods )
					}
				}
				if ( owner.IsPlayer() )
				{
					int conversationID = GetConversationIndex( "upgradeTo2" )
					Remote_CallFunction_Replay( owner, "ServerCallback_PlayTitanConversation", conversationID )
					Remote_CallFunction_NonReplay( owner, "ServerCallback_VanguardUpgradeMessage", 6 )
				}
			}
		}
		else if ( currentUpgradeCount == 2 )
		{
			if ( SoulHasPassive( soul, ePassives.PAS_VANGUARD_CORE7 ) )  // Multi-Target Missiles
			{
				if ( owner.IsPlayer() )
				{
					array<string> conversations = [ "upgradeTo3", "upgradeToFin" ]
					int conversationID = GetConversationIndex( conversations.getrandom() )
					Remote_CallFunction_Replay( owner, "ServerCallback_PlayTitanConversation", conversationID )
					Remote_CallFunction_NonReplay( owner, "ServerCallback_VanguardUpgradeMessage", 7 )
				}

				entity ordnance = owner.GetOffhandWeapon( OFFHAND_RIGHT )
				array<string> mods
				if ( ordnance.HasMod( "missile_racks") )
					mods = [ "upgradeCore_MissileRack_Vanguard" ]
				else
					mods = [ "upgradeCore_Vanguard" ]

				if ( ordnance.HasMod( "fd_balance" ) )
					mods.append( "fd_balance" )

				float ammoFrac = float( ordnance.GetWeaponPrimaryClipCount() ) / float( ordnance.GetWeaponPrimaryClipCountMax() )
				owner.TakeWeaponNow( ordnance.GetWeaponClassName() )
				owner.GiveOffhandWeapon( "mp_titanweapon_shoulder_rockets", OFFHAND_RIGHT, mods )
				ordnance = owner.GetOffhandWeapon( OFFHAND_RIGHT )
				ordnance.SetWeaponChargeFractionForced( 1 - ammoFrac )
			}
			else if ( SoulHasPassive( soul, ePassives.PAS_VANGUARD_CORE8 ) ) //Superior Chassis
			{
				if ( owner.IsPlayer() )
				{
					array<string> conversations = [ "upgradeTo3", "upgradeToFin" ]
					int conversationID = GetConversationIndex( conversations.getrandom() )
					Remote_CallFunction_Replay( owner, "ServerCallback_PlayTitanConversation", conversationID )
					Remote_CallFunction_NonReplay( owner, "ServerCallback_VanguardUpgradeMessage", 8 )

					if ( !GetDoomedState( owner ) )
					{
						int missingHealth = owner.GetMaxHealth() - owner.GetHealth()
						array<string> settingMods = owner.GetPlayerSettingsMods()
						settingMods.append( "core_health_upgrade" )
						owner.SetPlayerSettingsWithMods( owner.GetPlayerSettings(), settingMods )
						owner.SetHealth( max( owner.GetMaxHealth() - missingHealth, VANGUARD_CORE8_HEALTH_AMOUNT ) )

						//Hacky Hack - Append core_health_upgrade to setFileMods so that we have a way to check that this upgrade is active.
						soul.soul.titanLoadout.setFileMods.append( "core_health_upgrade" )
					}
					else
					{
						owner.SetHealth( owner.GetMaxHealth() )
					}
				}
				else
				{
				  if ( !GetDoomedState( owner ) )
				  {
					  owner.SetMaxHealth( owner.GetMaxHealth() + VANGUARD_CORE8_HEALTH_AMOUNT )
					  owner.SetHealth( owner.GetHealth() + VANGUARD_CORE8_HEALTH_AMOUNT )
				  }
				}
				entity soul = owner.GetTitanSoul()
				soul.SetPreventCrits( true )
			}
			else if ( SoulHasPassive( soul, ePassives.PAS_VANGUARD_CORE9 ) ) //XO-16 Battle Rifle
			{
				array<entity> weapons = GetPrimaryWeapons( owner )
				if ( weapons.len() > 0 )
				{
					entity primaryWeapon = weapons[0]
					if ( IsValid( primaryWeapon ) )
					{
						if ( primaryWeapon.HasMod( "arc_rounds" ) )
						{
							primaryWeapon.RemoveMod( "arc_rounds" )
							array<string> mods = primaryWeapon.GetMods()
							mods.append( "arc_rounds_with_battle_rifle" )
							primaryWeapon.SetMods( mods )
						}
						else
						{
							array<string> mods = primaryWeapon.GetMods()
							mods.append( "battle_rifle" )
							mods.append( "battle_rifle_icon" )
							primaryWeapon.SetMods( mods )
						}
					}
				}

				if ( owner.IsPlayer() )
				{
					array<string> conversations = [ "upgradeTo3", "upgradeToFin" ]
					int conversationID = GetConversationIndex( conversations.getrandom() )
					Remote_CallFunction_Replay( owner, "ServerCallback_PlayTitanConversation", conversationID )
					Remote_CallFunction_NonReplay( owner, "ServerCallback_VanguardUpgradeMessage", 9 )
				}
			}
		}
		else
		{
			if ( owner.IsPlayer() )
			{
				int conversationID = GetConversationIndex( "upgradeShieldReplenish" )
				Remote_CallFunction_Replay( owner, "ServerCallback_PlayTitanConversation", conversationID )
			}
		}
		soul.SetTitanSoulNetInt( "upgradeCount", currentUpgradeCount + 1 )
}

void function PilotInTitanSet( entity titan )
{
    if( IsValid( titan ) )
	{
	thread EjectWhenDoomed( titan )
	string attackerType = GetTitanCharacterName( titan )
	switch ( attackerType )
	    {
		case "ronin":
		                titan.SetAISettings( "npc_titan_stryder_leadwall" )
						titan.SetBehaviorSelector( "behavior_titan_shotgun" )
						thread core( titan )
						//titan.SetTitle( "Ronin" )
                        break;
		case "scorch":
		                titan.SetAISettings( "npc_titan_ogre_meteor" )
						titan.SetBehaviorSelector( "behavior_titan_ogre_meteor" )
						//titan.SetTitle( "Scorch" )
                        break;
		case "legion":
		                titan.SetAISettings( "npc_titan_ogre_minigun" )
						titan.SetBehaviorSelector( "behavior_titan_ogre_minigun" )
						//titan.SetTitle( "Legion" )
			            break;
		case "ion":
		                titan.SetAISettings( "npc_titan_atlas_stickybomb" )
						titan.SetBehaviorSelector( "behavior_titan_long_range" )
						//titan.SetTitle( "Ion" )
                        break;
		case "tone":
		                titan.SetAISettings( "npc_titan_atlas_tracker" )
						titan.SetBehaviorSelector( "behavior_titan_long_range" )
						//titan.SetTitle( "Tone" )
                        break;
		case "vanguard":
		                titan.SetAISettings( "npc_titan_atlas_vanguard" )
						titan.SetBehaviorSelector( "behavior_titan_long_range" )
						thread MonitorMonarchShield( titan )
						//titan.SetTitle( "Monarch" )
                        break;
        case "northstar":
		                titan.SetAISettings( "npc_titan_stryder_sniper" )
						titan.SetBehaviorSelector( "behavior_titan_sniper" )
						//titan.SetTitle( "Northstar" )
			            break;
		}
	}
	titan.SetCapabilityFlag( bits_CAP_SYNCED_MELEE_ATTACK, false )
	titan.EnableNPCMoveFlag( NPCMF_PREFER_SPRINT | NPCMF_DISABLE_MOVE_TRANSITIONS )
	titan.EnableNPCFlag( NPC_NO_PAIN | NPC_NO_GESTURE_PAIN | NPC_ALLOW_PATROL | NPC_ALLOW_INVESTIGATE | NPC_IGNORE_FRIENDLY_SOUND )
	titan.DisableNPCFlag( NPC_PAIN_IN_SCRIPTED_ANIM | NPC_ALLOW_FLEE | NPC_USE_SHOOTING_COVER )
}

void function PilotNotInTitanSet( entity titan )
{
    if( IsValid( titan ) )
	{
	string attackerType = GetTitanCharacterName( titan )
	switch ( attackerType )
	    {
		case "ronin":
		                titan.SetAISettings( "npc_titan_auto_stryder_leadwall" )
                        break;
		case "scorch":
		                titan.SetAISettings( "npc_titan_auto_ogre_meteor" )
                        break;
		case "legion":
		                titan.SetAISettings( "npc_titan_auto_ogre_minigun" )
			            break;
		case "ion":
		                titan.SetAISettings( "npc_titan_auto_atlas_stickybomb" )
                        break;
		case "tone":
		                titan.SetAISettings( "npc_titan_auto_atlas_tracker" )
                        break;
		case "vanguard":
		                titan.SetAISettings( "npc_titan_auto_atlas_vanguard" )
                        break;
        case "northstar":
		                titan.SetAISettings( "npc_titan_auto_stryder_sniper" )
			            break;
		}
	titan.DisableNPCMoveFlag( NPCMF_PREFER_SPRINT | NPCMF_DISABLE_MOVE_TRANSITIONS )
	titan.DisableNPCFlag( NPC_NO_PAIN | NPC_NO_GESTURE_PAIN | NPC_ALLOW_PATROL | NPC_ALLOW_INVESTIGATE | NPC_IGNORE_FRIENDLY_SOUND )
	titan.EnableNPCFlag( NPC_PAIN_IN_SCRIPTED_ANIM | NPC_ALLOW_FLEE )
	}
}

void function AutoTitanLoadout( entity titan )
{
    if( IsValid( titan ) )
	{
	TakeWeaponsForArray( titan, titan.GetMainWeapons() )
	titan.TakeOffhandWeapon( OFFHAND_ORDNANCE )
	titan.TakeOffhandWeapon( OFFHAND_SPECIAL )
	titan.TakeOffhandWeapon( OFFHAND_ANTIRODEO )
	titan.TakeOffhandWeapon( OFFHAND_EQUIPMENT )
	titan.TakeOffhandWeapon( OFFHAND_MELEE )
	string attackerType = GetTitanCharacterName( titan )
	switch ( attackerType )
	    {
		case "ronin":
		                titan.GiveWeapon( "mp_titanweapon_leadwall" )
						titan.GiveOffhandWeapon( "mp_titanweapon_arc_wave", OFFHAND_ORDNANCE )
						titan.GiveOffhandWeapon( "mp_titancore_shift_core", OFFHAND_EQUIPMENT )
						titan.GiveOffhandWeapon( "mp_titanability_phase_dash", OFFHAND_ANTIRODEO )
						titan.GiveOffhandWeapon( "mp_ability_swordblock", OFFHAND_SPECIAL )
						titan.GiveOffhandWeapon( "melee_titan_sword", OFFHAND_MELEE )
						entity soul = titan.GetTitanSoul()
						if( IsValid( soul ) )
						{
						soul.soul.titanLoadout.titanExecution = "execution_random_3"
						}
                        break;
		case "scorch":
		                titan.GiveWeapon( "mp_titanweapon_meteor" )
						titan.GiveOffhandWeapon( "mp_titanweapon_flame_wall", OFFHAND_ORDNANCE )
						titan.GiveOffhandWeapon( "mp_titancore_flame_wave", OFFHAND_EQUIPMENT )
						titan.GiveOffhandWeapon( "mp_titanability_slow_trap", OFFHAND_ANTIRODEO )
						titan.GiveOffhandWeapon( "mp_titanweapon_heat_shield", OFFHAND_SPECIAL )
						titan.GiveOffhandWeapon( "melee_titan_punch", OFFHAND_MELEE )
						entity soul = titan.GetTitanSoul()
						if( IsValid( soul ) )
						{
						soul.soul.titanLoadout.titanExecution = "execution_random_1"
						}
                        break;
		case "legion":
		                titan.GiveWeapon( "mp_titanweapon_predator_cannon" )
						titan.GiveOffhandWeapon( "mp_titanability_power_shot", OFFHAND_ORDNANCE )
						titan.GiveOffhandWeapon( "mp_titancore_siege_mode", OFFHAND_EQUIPMENT )
						titan.GiveOffhandWeapon( "mp_titanability_ammo_swap", OFFHAND_ANTIRODEO )
						titan.GiveOffhandWeapon( "mp_titanability_gun_shield", OFFHAND_SPECIAL )
						titan.GiveOffhandWeapon( "melee_titan_punch", OFFHAND_MELEE )
						entity soul = titan.GetTitanSoul()
						if( IsValid( soul ) )
						{
						soul.soul.titanLoadout.titanExecution = "execution_random_5"
						}
			            break;
		case "ion":
		                titan.GiveWeapon( "mp_titanweapon_particle_accelerator" )
						titan.GiveOffhandWeapon( "mp_titanweapon_laser_lite", OFFHAND_ORDNANCE )
						titan.GiveOffhandWeapon( "mp_titancore_laser_cannon", OFFHAND_EQUIPMENT )
						titan.GiveOffhandWeapon( "mp_titanability_laser_trip", OFFHAND_ANTIRODEO )
						titan.GiveOffhandWeapon( "mp_titanweapon_vortex_shield", OFFHAND_SPECIAL )
						titan.GiveOffhandWeapon( "melee_titan_punch", OFFHAND_MELEE )
						entity soul = titan.GetTitanSoul()
						if( IsValid( soul ) )
						{
						soul.soul.titanLoadout.titanExecution = "execution_ion"
						}
                        break;
		case "tone":
		                titan.GiveWeapon( "mp_titanweapon_sticky_40mm" )
						titan.GiveOffhandWeapon( "mp_titanweapon_tracker_rockets", OFFHAND_ORDNANCE )
						titan.GiveOffhandWeapon( "mp_titancore_salvo_core", OFFHAND_EQUIPMENT )
						titan.GiveOffhandWeapon( "mp_titanability_sonar_pulse", OFFHAND_ANTIRODEO )
						titan.GiveOffhandWeapon( "mp_titanability_particle_wall", OFFHAND_SPECIAL )
						titan.GiveOffhandWeapon( "melee_titan_punch", OFFHAND_MELEE )
						entity soul = titan.GetTitanSoul()
						if( IsValid( soul ) )
						{
						soul.soul.titanLoadout.titanExecution = "execution_random_4"
						}
                        break;
		case "vanguard":
		                titan.GiveWeapon( "mp_titanweapon_xo16_vanguard" )
						titan.GiveOffhandWeapon( "mp_titanweapon_salvo_rockets", OFFHAND_ORDNANCE )
						titan.GiveOffhandWeapon( "mp_titancore_upgrade", OFFHAND_EQUIPMENT )
						titan.GiveOffhandWeapon( "mp_titanability_rearm", OFFHAND_ANTIRODEO )
						titan.GiveOffhandWeapon( "mp_titanweapon_stun_laser", OFFHAND_SPECIAL )
						titan.GiveOffhandWeapon( "melee_titan_punch", OFFHAND_MELEE )
						thread MonarchUpgrades( titan )
						entity soul = titan.GetTitanSoul()
						if( IsValid( soul ) )
						{
						soul.soul.titanLoadout.titanExecution = "execution_vanguard"
						if ( RandomInt( 100 ) < 50 )
						{
						GivePassive( soul, ePassives.PAS_VANGUARD_COREMETER )
						soul.soul.titanLoadout.titanExecution = "execution_vanguard_kit"
						}
						}
                        break;
        case "northstar":
		                titan.GiveWeapon( "mp_titanweapon_sniper" )
						titan.GiveOffhandWeapon( "mp_titanweapon_dumbfire_rockets", OFFHAND_ORDNANCE )
						titan.GiveOffhandWeapon( "mp_titancore_flight_core", OFFHAND_EQUIPMENT )
						titan.GiveOffhandWeapon( "mp_titanability_hover", OFFHAND_ANTIRODEO )
						titan.GiveOffhandWeapon( "mp_titanability_tether_trap", OFFHAND_SPECIAL )
						titan.GiveOffhandWeapon( "melee_titan_punch", OFFHAND_MELEE )
						entity soul = titan.GetTitanSoul()
						if( IsValid( soul ) )
						{
						soul.soul.titanLoadout.titanExecution = "execution_random_2"
						}
			            break;
		}
	if(GetCurrentPlaylistVarInt("aegis_upgrades", 0) == 1)
	{
	titan.SetMaxHealth( titan.GetMaxHealth() + 2500 )
	titan.SetHealth( titan.GetMaxHealth() )
	}
	}
}

void function TitanStandAfterDropIn( entity titan, entity pilot )
{
wait 23
if( IsValid( titan ) && IsValid( pilot ) )
{
if( IsAlive( titan ) && IsAlive( pilot ) && !pilot.IsInvulnerable() )
{
local embarkSet = FindBestEmbark( pilot, titan )
if ( embarkSet == null )
{
TitanStandUp( titan )
}
}
}
}

void function __TitanKneelOrStandAfterDropin( entity titan, entity pilot )
{
	Assert( IsAlive( titan ) )
	titan.EndSignal( "OnDeath" )
	titan.EndSignal( "OnDestroy" )

	titan.WaitSignal( "TitanHotDropComplete" )

	if ( IsAlive( pilot ) )
		thread PlayAnimGravity( titan, "at_MP_embark_idle" )
	//else the titan will automatically stand up
}

/************************************************************************************************\

 ######  ##      ## #### ########  ######  ##     ##
##    ## ##  ##  ##  ##     ##    ##    ## ##     ##
##       ##  ##  ##  ##     ##    ##       ##     ##
 ######  ##  ##  ##  ##     ##    ##       #########
      ## ##  ##  ##  ##     ##    ##       ##     ##
##    ## ##  ##  ##  ##     ##    ##    ## ##     ##
 ######   ###  ###  ####    ##     ######  ##     ##

\************************************************************************************************/
function NpcPilotEmbarksTitan( entity pilot, entity titan )
{
	Assert( IsAlive( pilot ) )
	Assert( IsAlive( titan ) )
	Assert( !pilot.IsTitan() )
	Assert( titan.IsTitan() )

	titan.EndSignal( "OnDestroy" )
	titan.EndSignal( "OnDeath" )

	OnThreadEnd(
		function () : ( titan, pilot )
		{
			if ( IsAlive( titan ) )
			{
				if ( titan.ContextAction_IsBusy() )
					//titan.ContextAction_ClearBusy()
				titan.ClearInvulnerable()

				Assert( !IsAlive( pilot ) )
			}
		}
	)

	local isInvulnerable = pilot.IsInvulnerable()
	//pilot.SetInvulnerable()
	//titan.SetInvulnerable()

	local titanSubClass = GetSoulTitanSubClass( titan.GetTitanSoul() )
	local embarkSet = FindBestEmbark( pilot, titan )

	while ( embarkSet == null )
	{
		WaitFrame()
		embarkSet = FindBestEmbark( pilot, titan )
	}

	FirstPersonSequenceStruct sequence
	sequence.attachment = "hijack"
	sequence.useAnimatedRefAttachment = expect bool ( embarkSet.action.useAnimatedRefAttachment )
	sequence.blendTime = 0.5
	sequence.thirdPersonAnim = GetAnimFromAlias( titanSubClass, embarkSet.animSet.thirdPersonKneelingAlias )
	local titanAnim = embarkSet.animSet.titanKneelingAnim
	if ( titan.GetTitanSoul().GetStance() > STANCE_STANDING )
	{
	sequence.thirdPersonAnim = GetAnimFromAlias( titanSubClass, embarkSet.animSet.thirdPersonStandingAlias )
	titanAnim = embarkSet.animSet.titanStandingAnim
	}

	if ( IsCloaked( pilot ) )
		pilot.SetCloakDuration( 0, 0, 1.5 )

	pilot.SetInvulnerable()
	HideName( pilot )
	thread FirstPersonSequence( sequence, pilot, titan )
	thread PlayAnimGravity( titan, titanAnim )
	WaittillAnimDone( titan )
	if ( !isInvulnerable )
		pilot.ClearInvulnerable()
	SetStanceStand( titan.GetTitanSoul() )
	NpcPilotBecomesTitan( pilot, titan )
}

entity function NpcPilotDisembarksTitan( entity titan )
{
	Assert( titan.IsTitan() )
	Assert( TitanHasNpcPilot( titan ) )

	entity pilot = NpcTitanBecomesPilot( titan )
	Assert( !pilot.IsTitan() )

	NpcPilotSetPetTitan( pilot, titan )

	thread __NpcPilotDisembarksTitan( pilot, titan )

	return pilot
}

function __NpcPilotDisembarksTitan( pilot, titan )
{
	expect entity( pilot )
	expect entity( titan )

	//titan.ContextAction_SetBusy()
	//pilot.ContextAction_SetBusy()

	if ( pilot.GetTitle() != "" )
	{
		titan.SetTitle( pilot.GetTitle() + "'s Auto-Titan" )
	}

	local isInvulnerable = pilot.IsInvulnerable()
	//pilot.SetInvulnerable()
	//titan.SetInvulnerable()

	local pilot3pAnim, pilot3pAudio, titanDisembarkAnim
	local titanSubClass = GetSoulTitanSubClass( titan.GetTitanSoul() )
	local standing = titan.GetTitanSoul().GetStance() >= STANCE_STANDING // STANCE_STANDING = 2, STANCE_STAND = 3

	if ( standing )
	{
		titanDisembarkAnim = "at_dismount_stand"
		pilot3pAnim = "pt_dismount_" + titanSubClass + "_stand"
		pilot3pAudio = titanSubClass + "_Disembark_Standing_3P"
	}
	else
	{
		titanDisembarkAnim = "at_dismount_crouch"
		pilot3pAnim = "pt_dismount_" + titanSubClass + "_crouch"
		pilot3pAudio = titanSubClass + "_Disembark_Kneeling_3P"
	}

//	pilot.SetParent( titan, "hijack" )
	EmitSoundOnEntity( titan, pilot3pAudio )
	thread PlayAnim( titan, titanDisembarkAnim )
	waitthread PlayAnim( pilot, pilot3pAnim, titan, "hijack" )

	//pilot.ClearParent()
	//titan.ContextAction_ClearBusy()
	//pilot.ContextAction_ClearBusy()
	if ( !isInvulnerable )
		//pilot.ClearInvulnerable()
	//titan.ClearInvulnerable()

	if ( !standing )
		SetStanceKneel( titan.GetTitanSoul() )
}

void function NpcPilotBecomesTitan( entity pilot, entity titan )
{
	Assert( IsAlive( pilot ) )
	Assert( IsAlive( titan ) )
	Assert( IsGrunt( pilot ) || IsPilotElite( pilot ) )
	Assert( titan.IsTitan() )

	entity titanSoul = titan.GetTitanSoul()

	titanSoul.soul.seatedNpcPilot.isValid				= true

	titanSoul.soul.seatedNpcPilot.team 					= pilot.GetTeam()
	titanSoul.soul.seatedNpcPilot.weapon 				= pilot.GetMainWeapons()[0].GetWeaponClassName()

	titanSoul.soul.seatedNpcPilot.modelAsset 			= pilot.GetModelName()
	titanSoul.soul.seatedNpcPilot.title 				= pilot.GetTitle()

	// removing this, hard to control
	//titanSoul.soul.seatedNpcPilot.isInvulnerable		= pilot.IsInvulnerable()


	// respawn missing settings saving
	//titanSoul.soul.seatedNpcPilot.spawnflags			= int( pilot.kv.spawnflags )
	titanSoul.soul.seatedNpcPilot.accuracy				= float( pilot.kv.AccuracyMultiplier )
	titanSoul.soul.seatedNpcPilot.proficiency			= float( pilot.kv.WeaponProficiency ) // incorrect spelling and wrong type
	//titanSoul.soul.seatedNpcPilot.physDamageScale		= float( pilot.kv.physDamageScale )

	titan.SetTitle( titanSoul.soul.seatedNpcPilot.title )

	// vanilla missing, adding this behavior for a fix
	// bubble can be destroyed properly by SetStanceStand( titan.GetTitanSoul() ) in NpcPilotEmbarksTitan()
	// no need to use this function
	//thread DelayedDestroyBubble( titan )
	thread PilotInTitanSet( titan )
	titan.kv.WeaponProficiency = titanSoul.soul.seatedNpcPilot.proficiency
	titan.kv.AccuracyMultiplier = titanSoul.soul.seatedNpcPilot.accuracy
	ScriptCallback_OnNpcPilotBecomesTitan( pilot, titan )
	pilot.Destroy()
}

void function EjectWhenDoomed( entity titan )
{
bool shouldEjectTitan = false
 while( true )
 {
if ( IsAlive( titan ) )
{
if ( titan.GetTitanSoul().IsDoomed() )
{
wait 2
while( true )
{
wait 0.2

if ( !IsAlive( titan ) )
return

    entity soul = titan.GetTitanSoul()
	if ( !IsValid( soul ) )
		return
                float ejectRequiredDoomedHealth = 1250
				int health = titan.GetHealth()
				int shieldHealth = soul.GetShieldHealth()
				int maxHealth = titan.GetMaxHealth()
				int ShieldHealth = health + shieldHealth
				entity enemy = titan.GetEnemy()
				if ( ShieldHealth <= ejectRequiredDoomedHealth )
					shouldEjectTitan = true 
				if ( IsAlive( enemy ) && enemy.IsTitan() )
				{
					bool horizontallyClose = Distance2D( titan.GetOrigin(), enemy.GetOrigin() ) < 630
					// combating an enemy titan who can execute us at close range, but we can't execute them! way too dangerous, we eject
					// needs to handle ejecting case here, so we don't waste our health
					bool enemyIsEjecting = HasSoul( enemy ) && enemy.GetTitanSoul().IsEjecting()
					if ( !enemyIsEjecting && horizontallyClose && !enemy.ContextAction_IsMeleeExecution() )
						shouldEjectTitan = true
				}
				if ( shouldEjectTitan )
				{
				    if ( !titan.IsInvulnerable() )
					{
					thread TitanEjectPlayerForNpcs( titan )
					return
					}
				}
}
}
}
WaitFrame()
 }
}

entity function NpcTitanBecomesPilot( entity titan )
{
	Assert( IsValid( titan ) )
	Assert( titan.IsTitan() )

	entity titanSoul = titan.GetTitanSoul()
	if( !IsValid( titanSoul ) ) // defensive fix for titan.Destroy() situations
		return
	titanSoul.soul.seatedNpcPilot.isValid = false

	string weapon 			= titanSoul.soul.seatedNpcPilot.weapon
	asset model 			= titanSoul.soul.seatedNpcPilot.modelAsset
	string title 			= titanSoul.soul.seatedNpcPilot.title
	int team 				= titanSoul.soul.seatedNpcPilot.team
	vector origin 			= titan.GetOrigin()
	float angles 		    = titan.GetAngles().z
	float proficiency 		= titanSoul.soul.seatedNpcPilot.proficiency
	float accuracy 			= titanSoul.soul.seatedNpcPilot.accuracy

	// modified here: to make npc spawn longer hardcoded
	//entity pilot 			= CreateElitePilot( team, origin, angles )
	//entity pilot 			= CreateNPC( "npc_pilot_elite", team, origin, angles )
	entity pilot 			= CreateNPC( "npc_pilot_elite", team, origin, angles )
	
	// update to default model
	// this is hardcoded!! removing
    //pilot.SetModel($"models/humans/pilots/pilot_medium_geist_f.mdl")

	// modified here: to make npc spawn longer hardcoded
	SetSpawnOption_Weapon( pilot, weapon )
	DispatchSpawn( pilot )
	// hardcoded
	pilot.kv.WeaponProficiency = proficiency
	pilot.kv.AccuracyMultiplier = accuracy
	titan.kv.WeaponProficiency = eWeaponProficiency.AVERAGE
	titan.kv.AccuracyMultiplier = 1.0
	pilot.SetTitle( title )
	titan.SetTitle( pilot.GetTitle() + "'s Auto-Titan" )
	pilot.SetModel( model ) // this is a hack, trying to avoid having a model spawn option because its easy to abuse
	
	// these setup should be moved to callbacks, don't handle in this file
	//pilot.EnableNPCFlag( NPC_ALLOW_PATROL | NPC_ALLOW_INVESTIGATE | NPC_ALLOW_FLEE ) // this one is hardcoded, can change it through callbacks
	//Highlight_SetEnemyHighlight( pilot, "enemy_player" )

	//NpcResetNextTitanRespawnAvailable( pilot )

	//pilot.kv.max_health 			= titanSoul.soul.seatedNpcPilot.health
	//pilot.kv.health 				= titanSoul.soul.seatedNpcPilot.health

	// respawn missing settings saving
	//pilot.kv.spawnflags 			= titanSoul.soul.seatedNpcPilot.spawnflags
	//pilot.kv.AccuracyMultiplier 	= titanSoul.soul.seatedNpcPilot.accuracy
	//pilot.kv.physDamageScale 		= titanSoul.soul.seatedNpcPilot.physDamageScale

	// never make pilot invulnerable in this section
	// because SetInvulnerable() can stack, and can make pilot become invulnerable forever
	//if ( titanSoul.soul.seatedNpcPilot.isInvulnerable )
	//	pilot.SetInvulnerable()

	titan.SetOwner( pilot )
	NPCFollowsNPC( titan, pilot )

	// respawn missing
	NpcPilotSetPetTitan( pilot, titan ) // should always setup pet titan on titan transfer
	thread PilotNotInTitanSet( titan )

	UpdateEnemyMemoryFromTeammates( pilot )

	ScriptCallback_OnNpcTitanBecomesPilot( pilot, titan )

	return pilot
}

bool function TitanHasNpcPilot( entity titan )
{
	Assert( titan.IsTitan() )

	entity titanSoul = titan.GetTitanSoul()
	if ( !IsValid( titanSoul ) )
		return false

	if ( !titanSoul.soul.seatedNpcPilot.isValid )
		return false

	return true
}

entity function NpcPilotGetPetTitan( entity pilot )
{
	Assert( !pilot.IsTitan() )
	Assert( "petTitan" in pilot.s )

	if ( !IsAlive( expect entity( pilot.s.petTitan ) ) )
		return null

	Assert( pilot.s.petTitan.IsTitan() )
	return expect entity( pilot.s.petTitan )
}

void function NpcPilotSetPetTitan( entity pilot, entity titan )
{
	Assert( !pilot.IsTitan() )
	Assert( titan.IsTitan() )
	Assert( "petTitan" in pilot.s )

	pilot.s.petTitan = titan
	pilot.Signal( "PetTitanUpdated" )
}

function __TitanStanceThink( entity pilot, entity titan )
{
	if ( !IsAlive( titan ) )
		return

	if ( titan.GetTitanSoul().IsDoomed() )
		return

	titan.EndSignal( "OnDeath" )
	titan.EndSignal( "OnDestroy" )
	titan.EndSignal( "NpcPilotBecomesTitan" )

	WaittillAnimDone( titan ) //wait for disembark anim

	// kneel in certain circumstances
	while ( IsAlive( pilot ) )
	{
		if ( !ChangedStance( titan ) )
			waitthread TitanWaitsToChangeStance_or_PilotDeath( pilot, titan )
	}

	if ( titan.GetTitanSoul().GetStance() < STANCE_STANDING )
	{
		while ( !TitanCanStand( titan ) )
			wait 2

		TitanStandUp( titan )
	}
}

function TitanWaitsToChangeStance_or_PilotDeath( pilot, titan )
{
	pilot.EndSignal( "OnDeath" )
	pilot.EndSignal( "OnDestroy" )

	TitanWaitsToChangeStance( titan )
}

/************************************************************************************************\

########  #######   #######  ##        ######
   ##    ##     ## ##     ## ##       ##    ##
   ##    ##     ## ##     ## ##       ##
   ##    ##     ## ##     ## ##        ######
   ##    ##     ## ##     ## ##             ##
   ##    ##     ## ##     ## ##       ##    ##
   ##     #######   #######  ########  ######

\************************************************************************************************/

function __WaitforTitanCallinReady( entity pilot )
{
	pilot.EndSignal( "OnDeath" )
	pilot.EndSignal( "OnDestroy" )

	//HACK TODO: handle eTitanAvailability.Default vs custom and none, AND ALSO make a way to kill this thread
		float waittheydontloveyoulikeiloveyou = RandomFloatRange( NPC_NEXT_TITANTIME_MIN, NPC_NEXT_TITANTIME_MAX )
		wait waittheydontloveyoulikeiloveyou
}

function __TitanKneelsForPilot( pilot, titan )
{
	expect entity( pilot )
	expect entity( titan )

	pilot.EndSignal( "OnDeath" )
	pilot.EndSignal( "OnDestroy" )
	titan.EndSignal( "OnDeath" )
	titan.EndSignal( "OnDestroy" )

	OnThreadEnd(
		function () : ( pilot, titan )
		{
			if ( !IsAlive( titan ) )
				return

			SetStanceStand( titan.GetTitanSoul() )

			//the pilot never made it to embark - lets stand our titan up so he can fight
			if ( !IsAlive( pilot ) )
			{
				thread PlayAnimGravity( titan, "at_hotdrop_quickstand" )
				HideName( titan )
				//titan.ContextAction_ClearBusy()
			}
		}
	)

	if ( !titan.ContextAction_IsBusy() ) //might be set from kneeling
		//titan.ContextAction_SetBusy()
	SetStanceKneel( titan.GetTitanSoul() )

	waitthread PlayAnimGravity( titan, "at_MP_stand2knee_straight" )
	waitthread PlayAnim( titan, "at_MP_embark_idle" )
}

function HasEnemyRodeo( titan )
{
	expect entity( titan )

	if ( !IsAlive( titan ) )
		return false

	if ( IsValid( GetEnemyRodeoPilot( titan ) ) )
		return true

	return false
}

function TitanEjectPlayerForNpcs( entity ejectTitan, bool instant = false ) //TODO: This needs a refactor badly. Way too long and unwieldy. I think it was a mistake to handle both player Titan eject and NPC titan eject in the same function
{
	ejectTitan.Signal( "EjectAttempt" )

	Assert( ejectTitan.IsTitan() )
	Assert( IsAlive( ejectTitan ), "Ejecting titan expected to be alive. IsPlayer? " + ejectTitan.IsPlayer() + " ent: " + ejectTitan )

	if ( ejectTitan.ContextAction_IsActive() )
		return

	entity soul = ejectTitan.GetTitanSoul()

	if ( soul.IsEjecting() )
		return

	local e = {}
	e.titan <- ejectTitan
	e.team <- ejectTitan.GetTeam()

	e.player <- null
	e.npcPilot <- null
	bool ejectTitanHasNpcPilot = false

	if ( TitanHasNpcPilot( ejectTitan ) )
	{
		ejectTitanHasNpcPilot = true
	}

	e.attacker <- ( "attacker" in soul.lastAttackInfo ) ? soul.lastAttackInfo.attacker : null
	e.inflictor <- ( "inflictor" in soul.lastAttackInfo ) ? soul.lastAttackInfo.inflictor : null
	e.damageSourceId <- ( "damageSourceId" in soul.lastAttackInfo ) ? soul.lastAttackInfo.damageSourceId : -1
	e.damageTypes <- soul.lastAttackInfo.scriptType
	e.overrideAttacker <- soul.soul.nukeAttacker

	entity rodeoPilot = GetRodeoPilot( ejectTitan )
	if ( rodeoPilot && rodeoPilot == e.attacker )
		e.damageSourceId = eDamageSourceId.rodeo_forced_titan_eject

	ejectTitan.Signal( "TitanEjectionStarted" )
	ejectTitan.EndSignal( "OnDeath" )

	OnThreadEnd(
		function() : ( e, ejectTitan )
		{
			if ( IsAlive( ejectTitan ) )
			{
				ejectTitan.ClearInvulnerable()
			}
			else if ( IsValid( ejectTitan ) )
			{
				ejectTitan.ClearInvulnerable()
			}

			if ( IsValid( e.player ) )
			{
				e.player.UnfreezeControlsOnServer()
			}

			entity titan = expect entity( e.titan )

			if ( !IsAlive( titan ) )
				return

			entity soul = titan.GetTitanSoul()
			if ( !soul.soul.diesOnEject )
				return

			Assert( titan.IsTitan() )
			Assert( soul.IsEjecting() )
			titan.Die( e.attacker, e.inflictor, { scriptType = damageTypes.titanEjectExplosion | e.damageTypes, damageSourceId = e.damageSourceId } )
		}
	)

	soul.SetEjecting( true )
	ejectTitan.SetInvulnerable()  //Give both player and ejectTitan temporary invulnerability in the course of ejecting. Player invulnerability gets cleared in ClearEjectInvulnerability

	#if SERVER
		StatusEffect_StopAll( expect entity( e.titan ), eStatusEffect.lockon_detected_titan )
	#endif

	if ( !ejectTitan.ContextAction_IsBusy() )
		ejectTitan.ContextAction_SetBusy()

	local standing = true
	if ( IsValid( e.player ) )
		standing = e.player.IsStanding()
	else
		standing = soul.GetStance() == STANCE_STAND

	local titanEjectAnimPlayer, titanEjectAnimTitan
	if ( standing )
	{
			titanEjectAnimPlayer = "at_MP_eject_stand_start"
			titanEjectAnimTitan = "at_MP_eject_stand_end"
	}
	else
	{
		titanEjectAnimPlayer = "at_MP_eject_crouch_idle"
		titanEjectAnimTitan = "at_MP_eject_crouch_start"
	}
	const TITAN_PLAYEREJECT_DELAY = 0.4
    const TITAN_PLAYEREJECT_DURATION = 0.8 // long enough foranimation
	float ejectDuration // = TITAN_PLAYEREJECT_DURATION
		ejectDuration = TITAN_PLAYEREJECT_DURATION

//	ejectDuration = ejectTitan.GetSequenceDuration( titanEjectAnimPlayer )

	entity rodeoPlayer = GetRodeoPilot( ejectTitan )
	if ( IsValid( rodeoPlayer ) )
		Remote_CallFunction_Replay( rodeoPlayer, "ServerCallback_RodeoerEjectWarning", ejectTitan.GetTitanSoul().GetEncodedEHandle(), TITAN_PLAYEREJECT_DELAY + ejectDuration )

	float blendDelay = 0.15
	vector origin = ejectTitan.GetOrigin()

	if ( !instant )
	{
		if ( IsValid( e.player ) )
		{
			Remote_CallFunction_Replay( e.player, "ServerCallback_EjectConfirmed" )
			EmitSoundAtPositionExceptToPlayer( e.team, ejectTitan.GetOrigin(), e.player, "Titan_Eject_Servos_3P" )
			e.player.FreezeControlsOnServer()
		}
		else
		{
			EmitSoundAtPosition( e.team, ejectTitan.GetOrigin(), "Titan_Eject_Servos_3P" )
		}

		if ( !ejectTitan.IsTitan() )
		{
			// must be a titan, something bad has happened
			KillStuckPlayer( ejectTitan )
			return
		}

		ejectTitan.Anim_Play( titanEjectAnimPlayer )

		wait blendDelay  // wait for ejectTitan to blend into disembark pose

	}

	if ( ejectTitan.GetTitanSoul() == null )
		return

		EmitSoundAtPosition( e.team, ejectTitan.GetOrigin(), "Titan_Eject_PilotLaunch_3P" )

	entity titan = ejectTitan

	if ( ejectTitanHasNpcPilot )
		e.npcPilot = NpcTitanBecomesPilot( ejectTitan )

	vector titanOrigin = titan.GetOrigin()

	// HACKY, surprised there isn't a wrapper for this yet
	if ( !( "disableAutoTitanConversation" in titan.s ) )
		titan.s.disableAutoTitanConversation <- true // no auto titan chatter

	titan.SetInvulnerable() //Titan dies at the end of eject sequence by script
	titan.SetNPCPriorityOverride_NoThreat()	// AI shouldn't consider this ejecting titan as an enemy and shoot it, etc

	ejectTitan.Anim_Stop()
	e.titan = titan

	if ( ejectTitan.ContextAction_IsBusy() )
		ejectTitan.ContextAction_ClearBusy()

	FirstPersonSequenceStruct sequence
	sequence.thirdPersonAnim = expect string ( titanEjectAnimTitan )
	sequence.teleport = true
	thread FirstPersonSequence( sequence, titan )

	vector ejectAngles = titan.GetAngles()
	ejectAngles.x = 270
	//ejectAngles.x = RandomIntRange( 263, 277 ) //5 degrees back of straight up was 245

	float speed = RandomFloatRange( 1500, 1700 ) //was 1000

	e.singleRodeoPilot <- null //HACKY. Need to store it off because after time passes we don't have a handle to the rider anymore. Terribly hacky

	entity rider = GetRodeoPilot( titan )
	if ( rider && rider.GetParent() == titan )
	{
		e.singleRodeoPilot = rider //Need to store it off because after time passes we don't have a handle to the rider anymore. Terribly hacky
		if ( IsValid( e.player ) )
			thread TemporarilyNonSolidPlayer( expect entity( e.player ) )

		thread TemporarilyNonSolidPlayer( rider )

		vector riderEjectAngles = AnglesCompose( ejectAngles, < 5, 0, 0 > )

		float gravityScale = expect float ( rider.GetPlayerSettingsField( "gravityscale" ) )
		vector riderVelocity = AnglesToForward( riderEjectAngles ) * (speed * gravityScale) * 0.95

		ThrowRiderOff( rider, titan, riderVelocity )

		wait 0.05
	}

	if ( IsAlive( expect entity( e.player ) ) )
	{
		if ( PlayerHasPassive( expect entity( e.player ), ePassives.PAS_PHASE_EJECT ) )
		{
			PhaseShift( expect entity( e.player ), 0.0, 3.0 )
			ejectAngles.x = 315
			speed *= 0.5
		}
		ejectAngles = AnglesCompose( ejectAngles, < -5, 0, 0 > )

		float gravityScale = expect float ( e.player.GetPlayerSettingsField( "gravityscale" ) )
		vector velocity = AnglesToForward( ejectAngles ) * speed * sqrt( gravityScale )
		e.player.SetOrigin( e.player.GetOrigin() )
		e.player.SetVelocity( velocity )
		vector player_look_angles = titan.GetAngles()
		player_look_angles.x = 80  //was 35
		e.player.SetAngles( player_look_angles )

		//thread EjectFlightTracker( expect entity( e.player ) )

		//entity rider = expect entity( e.singleRodeoPilot )
		//if ( IsAlive( rider ) && e.player.GetTeam() != rider.GetTeam() )
			//thread LookAtEachOther( rider, expect entity( e.player ) )
	}
	else if ( ejectTitanHasNpcPilot && IsAlive( expect entity( e.npcPilot ) ) )
	{
		speed *= 1//magic number
		vector velocity = < 0, 0, speed > //straight up
		e.npcPilot.SetOrigin( titan.GetOrigin() /* + Vector(0,0,100)*/ )
		e.npcPilot.SetAngles( titan.GetAngles() )
		//e.npcPilot.Anim_ScriptedPlay( "running_jump_F_float" )
		e.npcPilot.SetVelocity( velocity )
	}

	wait 0.15

	vector explosionOrigin = titanOrigin

		entity explosionOwner = GetExplosionOwner( e )
		entity inflictor
		if ( IsValid( e.player ) )
			inflictor = explosionOwner
		else
			inflictor = titan

		RadiusDamage(
				explosionOrigin,				// origin
				explosionOwner,					// owner
				inflictor,		 				// inflictor
				1,								// normal damage
				1800,							// heavy armor damage
				100,							// inner radius
				300,							// outer radius
				SF_ENVEXPLOSION_MASK_BRUSHONLY,	// explosion flags
				0, 								// distanceFromAttacker
				0, 								// explosionForce
				damageTypes.explosive,			// damage flags
				eDamageSourceId.titan_explosion	// damage source id
		)
	if ( IsValid( titan ) )
	{
		if ( titan.ContextAction_IsBusy() )
			titan.ContextAction_ClearBusy()
	}
}

void function KillStuckPlayer( entity player )
{
	if ( IsAlive( player ) )
		player.Die( svGlobal.worldspawn, svGlobal.worldspawn, { scriptType = DF_DISSOLVE, damageSourceId = damagedef_crush } )
}

entity function GetExplosionOwner( e )
{
	if ( IsValid( expect entity( e.overrideAttacker ) ) )
		return expect entity( e.overrideAttacker )

	if ( IsValid( expect entity( e.player ) ) )
		return expect entity( e.player )

	if ( IsValid( expect entity( e.titan ) ) )
		return expect entity( e.titan )

	return GetTeamEnt( expect int( e.team ) )
}